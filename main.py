import os
import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackContext
)
from chatgpt_client import request_chat_gpt

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_STATE = {}
USER_LEVEL = {}
QUIZ_QUESTIONS = {}
QUIZ_SCORE = {}
QUIZ_ANSWERED = {}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ
TRANSLATING, QUIZ, CONVERSATION, CHOOSING_LEVEL = range(4)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def set_user_state(user_id, state):
    USER_STATE[user_id] = state

def get_user_state(user_id):
    return USER_STATE.get(user_id, None)

def set_user_level(user_id, level):
    USER_LEVEL[user_id] = level

def get_user_level(user_id):
    return USER_LEVEL.get(user_id, "beginner")

def generate_quiz_questions():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    questions = []
    base_words = ["apple", "house", "world", "discover", "beautiful"]
    for word in base_words:
        translation = request_chat_gpt(f"Translate the word '{word}' to Russian.")
        questions.append({"en": word, "ru": translation.strip()})
    return questions

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["–ü–µ—Ä–µ–≤–æ–¥"],
        ["–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å–ª–æ–≤–∞—Ä–Ω–æ–º—É –∑–∞–ø–∞—Å—É"],
        ["–ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.\n"
        "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∂–∏–º–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–π:\n\n"
        "- /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "- –º–µ–Ω—é - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã.\n"
        "–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:\n"
        "1. –ü–µ—Ä–µ–≤–æ–¥: —è –ø–µ—Ä–µ–≤–µ–¥—É —Ç–≤–æ–∏ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã.\n"
        "2. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å–ª–æ–≤–∞—Ä–Ω–æ–º—É –∑–∞–ø–∞—Å—É: –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.\n"
        "3. –ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["–ü–µ—Ä–µ–≤–æ–¥"],
        ["–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å–ª–æ–≤–∞—Ä–Ω–æ–º—É –∑–∞–ø–∞—Å—É"],
        ["–ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = get_user_state(user_id)
    text = update.message.text.lower()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
    if text == '/menu' or text == '–º–µ–Ω—é':
        await menu(update, context)
        set_user_state(user_id, None)
        return

    # –î–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if state == TRANSLATING:
        await translate_text(update, context)
    elif state == QUIZ:
        await check_quiz_answer(update, context)
    elif state == CONVERSATION:
        await continue_conversation(update, context)
    elif state == CHOOSING_LEVEL:
        await choose_quiz_level(update, context)
    else:
        await guide_user(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª
async def guide_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text in ['/menu', '–º–µ–Ω—é']:
        await menu(update, context)
        set_user_state(update.effective_user.id, None)
        return

    if text == '–ø–µ—Ä–µ–≤–æ–¥':
        set_user_state(update.effective_user.id, TRANSLATING)
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.")
    elif text == '–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å–ª–æ–≤–∞—Ä–Ω–æ–º—É –∑–∞–ø–∞—Å—É':
        set_user_state(update.effective_user.id, CHOOSING_LEVEL)
        await choose_level(update, context)
    elif text == '–ø—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞':
        set_user_state(update.effective_user.id, CONVERSATION)
        await start_conversation(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async def choose_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text in ['/menu', '–º–µ–Ω—é']:
        await menu(update, context)
        set_user_state(update.effective_user.id, None)
        return

    keyboard = [
        ["–ù–∞—á–∞–ª—å–Ω—ã–π"],
        ["–°—Ä–µ–¥–Ω–∏–π"],
        ["–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async def choose_quiz_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text in ['/menu', '–º–µ–Ω—é']:
        await menu(update, context)
        set_user_state(update.effective_user.id, None)
        return

    levels = {
        "–Ω–∞—á–∞–ª—å–Ω—ã–π": "beginner",
        "—Å—Ä–µ–¥–Ω–∏–π": "intermediate",
        "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π": "advanced"
    }
    if text in levels:
        set_user_level(update.effective_user.id, levels[text])
        set_user_state(update.effective_user.id, QUIZ)
        QUIZ_QUESTIONS[update.effective_user.id] = generate_quiz_questions()
        QUIZ_SCORE[update.effective_user.id] = 0
        QUIZ_ANSWERED[update.effective_user.id] = 0
        await send_quiz_question(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async def send_quiz_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    questions = QUIZ_QUESTIONS[user_id]
    answered = QUIZ_ANSWERED[user_id]

    if answered < 5:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        question = questions[answered]
        context.user_data['quiz'] = question
        await update.message.reply_text(f"–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º: '{question['ru']}'?")
    else:
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        score = QUIZ_SCORE[user_id]
        await update.message.reply_text(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ {score} –∏–∑ 5 —Å–ª–æ–≤.")
        await menu(update, context)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async def check_quiz_answer(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text.lower()

    if text in ['/menu', '–º–µ–Ω—é']:
        await menu(update, context)
        set_user_state(user_id, None)
        return

    correct_answer = context.user_data['quiz']['en'].lower()
    if text == correct_answer:
        QUIZ_SCORE[user_id] += 1
        await update.message.reply_text("–í–µ—Ä–Ω–æ! üéâ")
    else:
        await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª: {correct_answer}.")

    QUIZ_ANSWERED[user_id] += 1
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await send_quiz_question(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
async def translate_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text in ['/menu', '–º–µ–Ω—é']:
        await menu(update, context)
        set_user_state(update.effective_user.id, None)
        return

    translation = request_chat_gpt(f"Translate '{update.message.text}' to English.")
    await update.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥: {translation}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É
async def start_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text in ['/menu', '–º–µ–Ω—é']:
        await menu(update, context)
        set_user_state(update.effective_user.id, None)
        return

    response = request_chat_gpt(f"Let's practice conversation in English about the topic '{update.message.text}'.")
    await update.message.reply_text(response)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
async def continue_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text in ['/menu', '–º–µ–Ω—é']:
        await menu(update, context)
        set_user_state(update.effective_user.id, None)
        return

    response = request_chat_gpt(f"Continue the conversation: {update.message.text}")
    await update.message.reply_text(response)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    application = ApplicationBuilder().token(TELEGRAM_API_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("exit", menu))  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /exit

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    message_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message)
    application.add_handler(message_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    main()
